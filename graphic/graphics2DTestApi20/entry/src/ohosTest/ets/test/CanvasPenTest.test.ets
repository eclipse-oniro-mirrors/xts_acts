/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, it, expect, TestType, Size, Level } from '@ohos/hypium'
import libGraphics2DApi20 from 'libgraphicsApiNdk.so'
const OH_DRAWING_SUCCESS = 0;
const OH_DRAWING_ERROR_INVALID_PARAMETER = 401;
export default function CanvasPenTest() {
  describe('CanvasPenTest', () => {
    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200
     * @tc.name    : SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200 start====");
          let result: number = libGraphics2DApi20.canvasDrawPixelMapRectConstraintFail();
          console.info("====> SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawPixelMapRectConstraint_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawPoint_0100
     * @tc.name    : SUB_OH_Drawing_CanvasDrawPoint_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawPoint_0100 success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawPoint_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawPoint_0100 start====");
          let result: number = libGraphics2DApi20.canvasDrawPointSuccess();
          console.info("====> SUB_OH_Drawing_CanvasDrawPoint_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawPoint_0100 catch err: " + err);
          done();
        }
      })


    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawPoint_0200
     * @tc.name    : SUB_OH_Drawing_CanvasDrawPoint_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawPoint fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawPoint_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawPoint_0200 start====");
          let result: number = libGraphics2DApi20.canvasDrawPointFail();
          console.info("====> SUB_OH_Drawing_CanvasDrawPoint_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawPoint_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawColor_0100
     * @tc.name    : SUB_OH_Drawing_CanvasDrawColor_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawColor success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawColor_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawColor_0100 start====");
          let result: number = libGraphics2DApi20.canvasDrawColorSuccess();
          console.info("====> SUB_OH_Drawing_CanvasDrawColor_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawColor_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawColor_0200
     * @tc.name    : SUB_OH_Drawing_CanvasDrawColor_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawColor fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawColor_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawColor_0200 start====");
          let result: number = libGraphics2DApi20.canvasDrawColorFail();
          console.info("====> SUB_OH_Drawing_CanvasDrawColor_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawColor_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawSingleCharacter_0100
     * @tc.name    : SUB_OH_Drawing_CanvasDrawSingleCharacter_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawSingleCharacter fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawSingleCharacter_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0100 start====");
          let result: number = libGraphics2DApi20.canvasDrawSingleCharacterSuccess();
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawSingleCharacter_0200
     * @tc.name    : SUB_OH_Drawing_CanvasDrawSingleCharacter_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawSingleCharacter fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawSingleCharacter_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0200 start====");
          let result: number = libGraphics2DApi20.canvasDrawSingleCharacterFail();
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawSingleCharacter_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100
     * @tc.name    : SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100 start====");
          let result: number = libGraphics2DApi20.canvasDrawSingleCharacterWithFeaturesSuccess();
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200
     * @tc.name    : SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200 start====");
          let result: number = libGraphics2DApi20.canvasDrawSingleCharacterWithFeaturesFail();
          console.info("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasDrawSingleCharacterWithFeatures_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasClipRegion_0100
     * @tc.name    : SUB_OH_Drawing_CanvasClipRegion_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasClipRegion success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasClipRegion_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasClipRegion_0100 start====");
          let result: number = libGraphics2DApi20.canvasClipRegionSuccess();
          console.info("====> SUB_OH_Drawing_CanvasClipRegion_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasClipRegion_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasClipRegion_0200
     * @tc.name    : SUB_OH_Drawing_CanvasClipRegion_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasClipRegion fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasClipRegion_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasClipRegion_0200 start====");
          let result: number = libGraphics2DApi20.canvasClipRegionFail();
          console.info("====> SUB_OH_Drawing_CanvasClipRegion_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasClipRegion_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasIsClipEmpty_0100
     * @tc.name    : SUB_OH_Drawing_CanvasIsClipEmpty_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasIsClipEmpty success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasIsClipEmpty_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasIsClipEmpty_0100 start====");
          let result: number = libGraphics2DApi20.canvasIsClipEmptySuccess();
          console.info("====> SUB_OH_Drawing_CanvasIsClipEmpty_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasIsClipEmpty_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasIsClipEmpty_0200
     * @tc.name    : SUB_OH_Drawing_CanvasIsClipEmpty_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasIsClipEmpty fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasIsClipEmpty_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasIsClipEmpty_0200 start====");
          let result: number = libGraphics2DApi20.canvasIsClipEmptyFail();
          console.info("====> SUB_OH_Drawing_CanvasIsClipEmpty_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasIsClipEmpty_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasGetImageInfo_0100
     * @tc.name    : SUB_OH_Drawing_CanvasGetImageInfo_0100
     * @tc.desc    : test SUB_OH_Drawing_CanvasGetImageInfo_0100 success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasGetImageInfo_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasGetImageInfo_0100 start====");
          let result: number = libGraphics2DApi20.canvasGetImageInfoSuccess();
          console.info("====> SUB_OH_Drawing_CanvasGetImageInfo_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasGetImageInfo_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_CanvasGetImageInfo_0200
     * @tc.name    : SUB_OH_Drawing_CanvasGetImageInfo_0200
     * @tc.desc    : test SUB_OH_Drawing_CanvasGetImageInfo fail Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_CanvasGetImageInfo_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_CanvasGetImageInfo_0200 start====");
          let result: number = libGraphics2DApi20.canvasGetImageInfoFail();
          console.info("====> SUB_OH_Drawing_CanvasGetImageInfo_0200 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_CanvasGetImageInfo_0200 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_PenGetAlphaFloat_0100
     * @tc.name    : SUB_OH_Drawing_PenGetAlphaFloat_0100
     * @tc.desc    : test SUB_OH_Drawing_PenGetAlphaFloat success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_PenGetAlphaFloat_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_PenGetAlphaFloat_0100 start====");
          let result: number = libGraphics2DApi20.penGetAlphaFloatSucccess();
          console.info("====> SUB_OH_Drawing_PenGetAlphaFloat_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_PenGetAlphaFloat_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_PenGetRedFloat_0100
     * @tc.name    : SUB_OH_Drawing_PenGetRedFloat_0100
     * @tc.desc    : test SUB_OH_Drawing_PenGetRedFloat success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_PenGetRedFloat_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_PenGetRedFloat_0100 start====");
          let result: number = libGraphics2DApi20.penGetRedFloatSucccess();
          console.info("====> SUB_OH_Drawing_PenGetRedFloat_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_PenGetRedFloat_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_PenGetGreenFloat_0100
     * @tc.name    : SUB_OH_Drawing_PenGetGreenFloat_0100
     * @tc.desc    : test SUB_OH_Drawing_PenGetGreenFloat success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_PenGetGreenFloat_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_PenGetGreenFloat_0100 start====");
          let result: number = libGraphics2DApi20.penGetGreenFloatSucccess();
          console.info("====> SUB_OH_Drawing_PenGetGreenFloat_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_PenGetGreenFloat_0100 catch err: " + err);
          done();
        }
      })

    /**
     * @tc.number  : SUB_OH_Drawing_PenGetBlueFloat_0100
     * @tc.name    : SUB_OH_Drawing_PenGetBlueFloat_0100
     * @tc.desc    : test SUB_OH_Drawing_PenGetBlueFloat success Scene
     * @tc.level   : Level3
     * @tc.size    : MediumTest
     * @tc.type    : Function
     */
    it('SUB_OH_Drawing_PenGetBlueFloat_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3,
      async (done: Function) => {
        try {
          console.info("====> SUB_OH_Drawing_PenGetBlueFloat_0100 start====");
          let result: number = libGraphics2DApi20.penGetBlueFloatSuccess();
          console.info("====> SUB_OH_Drawing_PenGetBlueFloat_0100 result====", result);
          expect(result).assertEqual(1);
          done();
        } catch (err) {
          console.error("====> SUB_OH_Drawing_PenGetBlueFloat_0100 catch err: " + err);
          done();
        }
      })
  })
}
