/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import attrsManager from '../../common/AttrsManager'
import router from '@ohos.router'

class AlphabetIndexerModifier implements AttributeModifier<AlphabetIndexerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: AlphabetIndexerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class BadgeModifier implements AttributeModifier<BadgeAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: BadgeAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ButtonModifier implements AttributeModifier<ButtonAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ButtonAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class BlankModifier implements AttributeModifier<BlankAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: BlankAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CalendarPickerModifier implements AttributeModifier<CalendarPickerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CalendarPickerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CanvasModifier implements AttributeModifier<CanvasAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CanvasAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CheckboxModifier implements AttributeModifier<CheckboxAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CheckboxAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CheckboxGroupModifier implements AttributeModifier<CheckboxGroupAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CheckboxGroupAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CircleModifier implements AttributeModifier<CircleAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CircleAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ColumnModifier implements AttributeModifier<ColumnAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ColumnAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ColumnSplitModifier implements AttributeModifier<ColumnSplitAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ColumnSplitAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class CounterModifier implements AttributeModifier<CounterAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: CounterAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class DataPanelModifier implements AttributeModifier<DataPanelAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: DataPanelAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class DatePickerModifier implements AttributeModifier<DatePickerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: DatePickerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class DividerModifier implements AttributeModifier<DividerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: DividerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class EllipseModifier implements AttributeModifier<EllipseAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: EllipseAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class FlexModifier implements AttributeModifier<FlexAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: FlexAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class FlowItemModifier implements AttributeModifier<FlowItemAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: FlowItemAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class FormLinkModifier implements AttributeModifier<FormLinkAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: FormLinkAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class GaugeModifier implements AttributeModifier<GaugeAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: GaugeAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class GridModifier implements AttributeModifier<GridAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: GridAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class GridColModifier implements AttributeModifier<GridColAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: GridColAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class GridItemModifier implements AttributeModifier<GridItemAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: GridItemAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class GridRowModifier implements AttributeModifier<GridRowAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: GridRowAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class HyperlinkModifier implements AttributeModifier<HyperlinkAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: HyperlinkAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ImageModifier implements AttributeModifier<ImageAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ImageAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ImageAnimatorModifier implements AttributeModifier<ImageAnimatorAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ImageAnimatorAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class LineModifier implements AttributeModifier<LineAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: LineAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ListModifier implements AttributeModifier<ListAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ListAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ListItemModifier implements AttributeModifier<ListItemAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ListItemAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ListItemGroupModifier implements AttributeModifier<ListItemGroupAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ListItemGroupAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class LoadingProgressModifier implements AttributeModifier<LoadingProgressAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class MarqueeModifier implements AttributeModifier<MarqueeAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: MarqueeAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class MenuModifier implements AttributeModifier<MenuAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: MenuAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class MenuItemModifier implements AttributeModifier<MenuItemAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: MenuItemAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class MenuItemGroupModifier implements AttributeModifier<MenuItemGroupAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: MenuItemGroupAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class NavDestinationModifier implements AttributeModifier<NavDestinationAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: NavDestinationAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class NavigationModifier implements AttributeModifier<NavigationAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: NavigationAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class NavigatorModifier implements AttributeModifier<NavigatorAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: NavigatorAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class NavRouterModifier implements AttributeModifier<NavRouterAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: NavRouterAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class PanelModifier implements AttributeModifier<PanelAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: PanelAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class PathModifier implements AttributeModifier<PathAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: PathAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class PolygonModifier implements AttributeModifier<PolygonAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: PolygonAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class PolylineModifier implements AttributeModifier<PolylineAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: PolylineAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ProgressModifier implements AttributeModifier<ProgressAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ProgressAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class QRCodeModifier implements AttributeModifier<QRCodeAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: QRCodeAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RadioModifier implements AttributeModifier<RadioAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RadioAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RatingModifier implements AttributeModifier<RatingAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RatingAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RectModifier implements AttributeModifier<RectAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RectAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RefreshModifier implements AttributeModifier<RefreshAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RefreshAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RelativeContainerModifier implements AttributeModifier<RelativeContainerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RelativeContainerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RemoteWindowModifier implements AttributeModifier<RemoteWindowAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RemoteWindowAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RichEditorModifier implements AttributeModifier<RichEditorAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RichEditorAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RichTextModifier implements AttributeModifier<RichTextAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RichTextAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RowModifier implements AttributeModifier<RowAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RowAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class RowSplitModifier implements AttributeModifier<RowSplitAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: RowSplitAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ScrollModifier implements AttributeModifier<ScrollAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ScrollAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ScrollBarModifier implements AttributeModifier<ScrollBarAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ScrollBarAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SearchModifier implements AttributeModifier<SearchAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SearchAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SelectModifier implements AttributeModifier<SelectAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SelectAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ShapeModifier implements AttributeModifier<ShapeAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ShapeAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SideBarContainerModifier implements AttributeModifier<SideBarContainerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SideBarContainerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SliderModifier implements AttributeModifier<SliderAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SliderAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SpanModifier implements AttributeModifier<SpanAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SpanAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class StackModifier implements AttributeModifier<StackAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: StackAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class StepperModifier implements AttributeModifier<StepperAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: StepperAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class StepperItemModifier implements AttributeModifier<StepperItemAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: StepperItemAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class SwiperModifier implements AttributeModifier<SwiperAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: SwiperAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TabContentModifier implements AttributeModifier<TabContentAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TabContentAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TabsModifier implements AttributeModifier<TabsAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TabsAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextModifier implements AttributeModifier<TextAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextAreaModifier implements AttributeModifier<TextAreaAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextAreaAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextClockModifier implements AttributeModifier<TextClockAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextClockAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextInputModifier implements AttributeModifier<TextInputAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextInputAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextPickerModifier implements AttributeModifier<TextPickerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextPickerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TextTimerModifier implements AttributeModifier<TextTimerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TextTimerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class TimePickerModifier implements AttributeModifier<TimePickerAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: TimePickerAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class ToggleModifier implements AttributeModifier<ToggleAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: ToggleAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class VideoModifier implements AttributeModifier<VideoAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: VideoAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class WaterFlowModifier implements AttributeModifier<WaterFlowAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: WaterFlowAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class WebModifier implements AttributeModifier<WebAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: WebAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class WindowSceneModifier implements AttributeModifier<WindowSceneAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: WindowSceneAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

class XComponentModifier implements AttributeModifier<XComponentAttribute> {
  backdropBlur: number = 3

  applyNormalAttribute(instance: XComponentAttribute): void {
    instance.backdropBlur(this.backdropBlur)
  }
}

@Entry
@Component
struct BackdropBlurPage {
  @State _backdropBlurAlphabetIndexerModifier: AlphabetIndexerModifier = new AlphabetIndexerModifier()
  @State _backdropBlurBadgeModifier: BadgeModifier = new BadgeModifier()
  @State _backdropBlurButtonModifier: ButtonModifier = new ButtonModifier()
  @State _backdropBlurBlankModifier: BlankModifier = new BlankModifier()
  @State _backdropBlurCalendarPickerModifier: CalendarPickerModifier = new CalendarPickerModifier()
  @State _backdropBlurCanvasModifier: CanvasModifier = new CanvasModifier()
  @State _backdropBlurCheckboxModifier: CheckboxModifier = new CheckboxModifier()
  @State _backdropBlurCheckboxGroupModifier: CheckboxGroupModifier = new CheckboxGroupModifier()
  @State _backdropBlurCircleModifier: CircleModifier = new CircleModifier()
  @State _backdropBlurColumnModifier: ColumnModifier = new ColumnModifier()
  @State _backdropBlurColumnSplitModifier: ColumnSplitModifier = new ColumnSplitModifier()
  @State _backdropBlurCounterModifier: CounterModifier = new CounterModifier()
  @State _backdropBlurDataPanelModifier: DataPanelModifier = new DataPanelModifier()
  @State _backdropBlurDatePickerModifier: DatePickerModifier = new DatePickerModifier()
  @State _backdropBlurDividerModifier: DividerModifier = new DividerModifier()
  @State _backdropBlurEllipseModifier: EllipseModifier = new EllipseModifier()
  @State _backdropBlurFlexModifier: FlexModifier = new FlexModifier()
  @State _backdropBlurFlowItemModifier: FlowItemModifier = new FlowItemModifier()
  @State _backdropBlurFormLinkModifier: FormLinkModifier = new FormLinkModifier()
  @State _backdropBlurGaugeModifier: GaugeModifier = new GaugeModifier()
  @State _backdropBlurGridModifier: GridModifier = new GridModifier()
  @State _backdropBlurGridColModifier: GridColModifier = new GridColModifier()
  @State _backdropBlurGridItemModifier: GridItemModifier = new GridItemModifier()
  @State _backdropBlurGridRowModifier: GridRowModifier = new GridRowModifier()
  @State _backdropBlurHyperlinkModifier: HyperlinkModifier = new HyperlinkModifier()
  @State _backdropBlurImageModifier: ImageModifier = new ImageModifier()
  @State _backdropBlurImageAnimatorModifier: ImageAnimatorModifier = new ImageAnimatorModifier()
  @State _backdropBlurLineModifier: LineModifier = new LineModifier()
  @State _backdropBlurListModifier: ListModifier = new ListModifier()
  @State _backdropBlurListItemModifier: ListItemModifier = new ListItemModifier()
  @State _backdropBlurListItemGroupModifier: ListItemGroupModifier = new ListItemGroupModifier()
  @State _backdropBlurLoadingProgressModifier: LoadingProgressModifier = new LoadingProgressModifier()
  @State _backdropBlurMarqueeModifier: MarqueeModifier = new MarqueeModifier()
  @State _backdropBlurMenuModifier: MenuModifier = new MenuModifier()
  @State _backdropBlurMenuItemModifier: MenuItemModifier = new MenuItemModifier()
  @State _backdropBlurMenuItemGroupModifier: MenuItemGroupModifier = new MenuItemGroupModifier()
  @State _backdropBlurNavDestinationModifier: NavDestinationModifier = new NavDestinationModifier()
  @State _backdropBlurNavigationModifier: NavigationModifier = new NavigationModifier()
  @State _backdropBlurNavigatorModifier: NavigatorModifier = new NavigatorModifier()
  @State _backdropBlurNavRouterModifier: NavRouterModifier = new NavRouterModifier()
  @State _backdropBlurPanelModifier: PanelModifier = new PanelModifier()
  @State _backdropBlurPathModifier: PathModifier = new PathModifier()
  @State _backdropBlurPolygonModifier: PolygonModifier = new PolygonModifier()
  @State _backdropBlurPolylineModifier: PolylineModifier = new PolylineModifier()
  @State _backdropBlurProgressModifier: ProgressModifier = new ProgressModifier()
  @State _backdropBlurQRCodeModifier: QRCodeModifier = new QRCodeModifier()
  @State _backdropBlurRadioModifier: RadioModifier = new RadioModifier()
  @State _backdropBlurRatingModifier: RatingModifier = new RatingModifier()
  @State _backdropBlurRectModifier: RectModifier = new RectModifier()
  @State _backdropBlurRefreshModifier: RefreshModifier = new RefreshModifier()
  @State _backdropBlurRelativeContainerModifier: RelativeContainerModifier = new RelativeContainerModifier()
  @State _backdropBlurRemoteWindowModifier: RemoteWindowModifier = new RemoteWindowModifier()
  @State _backdropBlurRichEditorModifier: RichEditorModifier = new RichEditorModifier()
  @State _backdropBlurRichTextModifier: RichTextModifier = new RichTextModifier()
  @State _backdropBlurRowModifier: RowModifier = new RowModifier()
  @State _backdropBlurRowSplitModifier: RowSplitModifier = new RowSplitModifier()
  @State _backdropBlurScrollModifier: ScrollModifier = new ScrollModifier()
  @State _backdropBlurScrollBarModifier: ScrollBarModifier = new ScrollBarModifier()
  @State _backdropBlurSearchModifier: SearchModifier = new SearchModifier()
  @State _backdropBlurSelectModifier: SelectModifier = new SelectModifier()
  @State _backdropBlurShapeModifier: ShapeModifier = new ShapeModifier()
  @State _backdropBlurSideBarContainerModifier: SideBarContainerModifier = new SideBarContainerModifier()
  @State _backdropBlurSliderModifier: SliderModifier = new SliderModifier()
  @State _backdropBlurSpanModifier: SpanModifier = new SpanModifier()
  @State _backdropBlurStackModifier: StackModifier = new StackModifier()
  @State _backdropBlurStepperModifier: StepperModifier = new StepperModifier()
  @State _backdropBlurStepperItemModifier: StepperItemModifier = new StepperItemModifier()
  @State _backdropBlurSwiperModifier: SwiperModifier = new SwiperModifier()
  @State _backdropBlurTabContentModifier: TabContentModifier = new TabContentModifier()
  @State _backdropBlurTabsModifier: TabsModifier = new TabsModifier()
  @State _backdropBlurTextModifier: TextModifier = new TextModifier()
  @State _backdropBlurTextAreaModifier: TextAreaModifier = new TextAreaModifier()
  @State _backdropBlurTextClockModifier: TextClockModifier = new TextClockModifier()
  @State _backdropBlurTextInputModifier: TextInputModifier = new TextInputModifier()
  @State _backdropBlurTextPickerModifier: TextPickerModifier = new TextPickerModifier()
  @State _backdropBlurTextTimerModifier: TextTimerModifier = new TextTimerModifier()
  @State _backdropBlurTimePickerModifier: TimePickerModifier = new TimePickerModifier()
  @State _backdropBlurToggleModifier: ToggleModifier = new ToggleModifier()
  @State _backdropBlurVideoModifier: VideoModifier = new VideoModifier()
  @State _backdropBlurWaterFlowModifier: WaterFlowModifier = new WaterFlowModifier()
  @State _backdropBlurWebModifier: WebModifier = new WebModifier()
  @State _backdropBlurWindowSceneModifier: WindowSceneModifier = new WindowSceneModifier()
  @State _backdropBlurXComponentModifier: XComponentModifier = new XComponentModifier()
  @State targetView: string = router.getParams() ? router.getParams()['view']['targetView'] : ''
  @State componentKey: string = router.getParams() ? router.getParams()['view']['componentKey'] : ''
  @State parentWidth: number = router.getParams() ? router.getParams()['view']['parentWidth'] : 0
  @State parentHeight: number = router.getParams() ? router.getParams()['view']['parentHeight'] : 0
  @State columns: number = router.getParams() ? router.getParams()['view']['columns'] : 0
  @State gutter: number = router.getParams() ? router.getParams()['view']['gutter'] : 0
  @State parentBackGroundColor: string = router.getParams() ? router.getParams()['view']['parentBackGroundColor'] : ''
  @State parentComponentKey: string = router.getParams() ? router.getParams()['view']['parentComponentKey'] : ''

  onPageShow() {
    console.info('backdropBlur translate page show called ')
    attrsManager.registerDataChange(value => {
      console.info('backdropBlur [registerDataChange] ' + JSON.stringify(value.backdropBlur))
      this._backdropBlurAlphabetIndexerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurBadgeModifier.backdropBlur = value.backdropBlur
      this._backdropBlurButtonModifier.backdropBlur = value.backdropBlur
      this._backdropBlurBlankModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCalendarPickerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCanvasModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCheckboxModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCheckboxGroupModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCircleModifier.backdropBlur = value.backdropBlur
      this._backdropBlurColumnModifier.backdropBlur = value.backdropBlur
      this._backdropBlurColumnSplitModifier.backdropBlur = value.backdropBlur
      this._backdropBlurCounterModifier.backdropBlur = value.backdropBlur
      this._backdropBlurDataPanelModifier.backdropBlur = value.backdropBlur
      this._backdropBlurDatePickerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurDividerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurEllipseModifier.backdropBlur = value.backdropBlur
      this._backdropBlurFlexModifier.backdropBlur = value.backdropBlur
      this._backdropBlurFlowItemModifier.backdropBlur = value.backdropBlur
      this._backdropBlurFormLinkModifier.backdropBlur = value.backdropBlur
      this._backdropBlurGaugeModifier.backdropBlur = value.backdropBlur
      this._backdropBlurGridModifier.backdropBlur = value.backdropBlur
      this._backdropBlurGridColModifier.backdropBlur = value.backdropBlur
      this._backdropBlurGridItemModifier.backdropBlur = value.backdropBlur
      this._backdropBlurGridRowModifier.backdropBlur = value.backdropBlur
      this._backdropBlurHyperlinkModifier.backdropBlur = value.backdropBlur
      this._backdropBlurImageModifier.backdropBlur = value.backdropBlur
      this._backdropBlurImageAnimatorModifier.backdropBlur = value.backdropBlur
      this._backdropBlurLineModifier.backdropBlur = value.backdropBlur
      this._backdropBlurListModifier.backdropBlur = value.backdropBlur
      this._backdropBlurListItemModifier.backdropBlur = value.backdropBlur
      this._backdropBlurListItemGroupModifier.backdropBlur = value.backdropBlur
      this._backdropBlurLoadingProgressModifier.backdropBlur = value.backdropBlur
      this._backdropBlurMarqueeModifier.backdropBlur = value.backdropBlur
      this._backdropBlurMenuModifier.backdropBlur = value.backdropBlur
      this._backdropBlurMenuItemModifier.backdropBlur = value.backdropBlur
      this._backdropBlurMenuItemGroupModifier.backdropBlur = value.backdropBlur
      this._backdropBlurNavDestinationModifier.backdropBlur = value.backdropBlur
      this._backdropBlurNavigationModifier.backdropBlur = value.backdropBlur
      this._backdropBlurNavigatorModifier.backdropBlur = value.backdropBlur
      this._backdropBlurNavRouterModifier.backdropBlur = value.backdropBlur
      this._backdropBlurPanelModifier.backdropBlur = value.backdropBlur
      this._backdropBlurPathModifier.backdropBlur = value.backdropBlur
      this._backdropBlurPolygonModifier.backdropBlur = value.backdropBlur
      this._backdropBlurPolylineModifier.backdropBlur = value.backdropBlur
      this._backdropBlurProgressModifier.backdropBlur = value.backdropBlur
      this._backdropBlurQRCodeModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRadioModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRatingModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRectModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRefreshModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRelativeContainerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRemoteWindowModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRichEditorModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRichTextModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRowModifier.backdropBlur = value.backdropBlur
      this._backdropBlurRowSplitModifier.backdropBlur = value.backdropBlur
      this._backdropBlurScrollModifier.backdropBlur = value.backdropBlur
      this._backdropBlurScrollBarModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSearchModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSelectModifier.backdropBlur = value.backdropBlur
      this._backdropBlurShapeModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSideBarContainerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSliderModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSpanModifier.backdropBlur = value.backdropBlur
      this._backdropBlurStackModifier.backdropBlur = value.backdropBlur
      this._backdropBlurStepperModifier.backdropBlur = value.backdropBlur
      this._backdropBlurStepperItemModifier.backdropBlur = value.backdropBlur
      this._backdropBlurSwiperModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTabContentModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTabsModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextAreaModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextClockModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextInputModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextPickerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTextTimerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurTimePickerModifier.backdropBlur = value.backdropBlur
      this._backdropBlurToggleModifier.backdropBlur = value.backdropBlur
      this._backdropBlurVideoModifier.backdropBlur = value.backdropBlur
      this._backdropBlurWaterFlowModifier.backdropBlur = value.backdropBlur
      this._backdropBlurWebModifier.backdropBlur = value.backdropBlur
      this._backdropBlurWindowSceneModifier.backdropBlur = value.backdropBlur
      this._backdropBlurXComponentModifier.backdropBlur = value.backdropBlur
    })
  }

  @Styles
  commonStyle() {
    .key(this.componentKey)
  }

  build() {
    Column() {
      if (this.targetView == 'AlphabetIndexer') {
        AlphabetIndexer({ arrayValue: ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G'], selected: 0 })
          .commonStyle()
          .attributeModifier(this._backdropBlurAlphabetIndexerModifier)
      }
      if (this.targetView == 'Button') {
        Button('button1')
          .commonStyle()
          .attributeModifier(this._backdropBlurButtonModifier)
      }
      if (this.targetView == 'Blank') {
        Blank()
          .backgroundColor(Color.Yellow)
          .commonStyle()
          .attributeModifier(this._backdropBlurBlankModifier)
      }
      if (this.targetView == 'Checkbox') {
        Checkbox()
          .commonStyle()
          .attributeModifier(this._backdropBlurCheckboxModifier)
      }
      if (this.targetView == 'CheckboxGroup') {
        CheckboxGroup({ group: 'checkboxGroup' })
          .commonStyle()
          .attributeModifier(this._backdropBlurCheckboxGroupModifier)
      }
      if (this.targetView == 'DataPanel') {
        DataPanel({ values: [5, 10, 10, 7, 9, 10, 10, 10, 10] })
          .commonStyle()
          .attributeModifier(this._backdropBlurDataPanelModifier)
      }
      if (this.targetView == 'DatePicker') {
        DatePicker({ start: new Date('1970-1-1'), end: new Date('2100-1-1') })
          .commonStyle()
          .attributeModifier(this._backdropBlurDatePickerModifier)
      }
      if (this.targetView == 'Divider') {
        Divider()
          .commonStyle()
          .attributeModifier(this._backdropBlurDividerModifier)
      }
      if (this.targetView == 'Gauge') {
        Gauge({ value: 105 })
          .colors([[0x317AF7, 1], [0x5BA854, 1], [0xE08C3A, 1], [0x9C554B, 1]])
          .commonStyle()
          .attributeModifier(this._backdropBlurGaugeModifier)
      }
      if (this.targetView == 'Image') {
        Image($r('app.media.icon'))
          .commonStyle()
          .attributeModifier(this._backdropBlurImageModifier)
      }
      if (this.targetView == 'ImageAnimator') {
        ImageAnimator()
          .images([{ src: $r('app.media.icon') }])
          .commonStyle()
          .attributeModifier(this._backdropBlurImageAnimatorModifier)
      }
      if (this.targetView == 'LoadingProgress') {
        LoadingProgress()
          .commonStyle()
          .attributeModifier(this._backdropBlurLoadingProgressModifier)
      }
      if (this.targetView == 'Marquee') {
        Marquee({
          start: true,
          step: 50,
          loop: Infinity,
          fromStart: true,
          src: 'Running Marquee starts rolling'
        })
          .commonStyle()
          .attributeModifier(this._backdropBlurMarqueeModifier)
      }
      if (this.targetView == 'Navigation') {
        Navigation() {
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurNavigationModifier)
      }
      if (this.targetView == 'Menu') {
        Menu() {
          MenuItem({ startIcon: $r('app.media.icon'), content: 'Menu' })
        }
					.backgroundColor(Color.Yellow)
          .commonStyle()
          .attributeModifier(this._backdropBlurMenuModifier)
      }
      if (this.targetView == 'NavRouter') {
        NavRouter() {
          Row() {
            Image($r('app.media.icon'))
          }

          NavDestination() {
            Text('NavDestination')
              .fontSize(10)
          }
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurNavRouterModifier)
      }
      if (this.targetView == 'Progress') {
        Progress({ value: 10, type: ProgressType.Eclipse })
          .commonStyle()
          .attributeModifier(this._backdropBlurProgressModifier)
      }
      if (this.targetView == 'QRCode') {
        QRCode('Running Marquee starts rolling')
          .commonStyle()
          .attributeModifier(this._backdropBlurQRCodeModifier)
      }
      if (this.targetView == 'Radio') {
        Radio({ value: 'Radio1', group: 'radioGroup' })
          .commonStyle()
          .attributeModifier(this._backdropBlurRadioModifier)
      }
      if (this.targetView == 'Rating') {
        Rating({ rating: 3.5, indicator: false })
          .commonStyle()
          .attributeModifier(this._backdropBlurRatingModifier)
      }
      if (this.targetView == 'ScrollBar') {
        ScrollBar({ scroller: new Scroller(), state: BarState.On }) {
          Text()
            .width(20)
            .height(100)
            .borderRadius(10)
            .backgroundColor('#C0C0C0')
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurScrollBarModifier)
      }
      if (this.targetView == 'Search') {
        Search()
          .commonStyle()
          .attributeModifier(this._backdropBlurSearchModifier)
      }
      if (this.targetView == 'Select') {
        Select([{ value: 'aaa' }, { value: 'bbb' }])
          .commonStyle()
          .attributeModifier(this._backdropBlurSelectModifier)
      }
      if (this.targetView == 'Slider') {
        Slider({ value: 50, min: 0, max: 100, style: SliderStyle.OutSet })
          .showTips(true)
          .commonStyle()
          .attributeModifier(this._backdropBlurSliderModifier)
      }
      if (this.targetView == 'Stepper') {
        Stepper() {
          StepperItem() {
            Column() {
              Text('Page One')
            }
          }
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurStepperModifier)
      }
      if (this.targetView == 'StepperItem') {
        Stepper() {
          StepperItem() {
            Column() {
              Text('Page One')
            }
          }
						.backgroundColor(Color.Red)
            .commonStyle()
            .attributeModifier(this._backdropBlurStepperItemModifier)
        }
					.backgroundColor(Color.Yellow)
          .width('100%')
          .height('100%')
      }
      if (this.targetView == 'Text') {
        Text('text1')
          .commonStyle()
          .attributeModifier(this._backdropBlurTextModifier)
      }
      if (this.targetView == 'TextArea') {
        TextArea({ placeholder: 'The text area can hold an unlimited amount of text. input your word...' })
          .commonStyle()
          .attributeModifier(this._backdropBlurTextAreaModifier)
      }
      if (this.targetView == 'TextClock') {
        TextClock({ timeZoneOffset: -8 })
          .format('hms')
          .commonStyle()
          .attributeModifier(this._backdropBlurTextClockModifier)
      }
      if (this.targetView == 'TextInput') {
        TextInput({ placeholder: 'input your word...' })
          .commonStyle()
          .attributeModifier(this._backdropBlurTextInputModifier)
      }
      if (this.targetView == 'TextPicker') {
        TextPicker({ range: ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G'] })
          .commonStyle()
          .attributeModifier(this._backdropBlurTextPickerModifier)
      }
      if (this.targetView == 'TextTimer') {
        TextTimer({ isCountDown: true, count: 30000 })
          .format('mm:ss.SS')
          .fontColor(Color.Black)
          .commonStyle()
          .attributeModifier(this._backdropBlurTextTimerModifier)
      }
      if (this.targetView == 'TimePicker') {
        TimePicker({ selected: new Date('2022-07-22T08:00:00') })
          .commonStyle()
          .attributeModifier(this._backdropBlurTimePickerModifier)
      }
      if (this.targetView == 'Toggle') {
        Toggle({ type: ToggleType.Switch, isOn: false })
          .commonStyle()
          .attributeModifier(this._backdropBlurToggleModifier)
      }
      if (this.targetView == 'Web') {
        Web({ src: 'www.example.com', controller: new WebController() })
          .commonStyle()
          .attributeModifier(this._backdropBlurWebModifier)
      }
      if (this.targetView == 'Circle') {
        Circle()
          .width(150)
          .height(200)
          .commonStyle()
          .attributeModifier(this._backdropBlurCircleModifier)
      }
      if (this.targetView == 'Ellipse') {
        Ellipse()
          .commonStyle()
          .attributeModifier(this._backdropBlurEllipseModifier)
      }
      if (this.targetView == 'Line') {
        Line()
          .startPoint([0, 0])
          .endPoint([50, 100])
          .backgroundColor(Color.Black)
          .commonStyle()
          .attributeModifier(this._backdropBlurLineModifier)
      }
      if (this.targetView == 'Polyline') {
        Polyline()
          .commonStyle()
          .attributeModifier(this._backdropBlurPolylineModifier)
      }
      if (this.targetView == 'Polygon') {
        Polygon()
          .commonStyle()
          .attributeModifier(this._backdropBlurPolygonModifier)
      }
      if (this.targetView == 'Path') {
        Path()
          .commonStyle()
          .attributeModifier(this._backdropBlurPathModifier)
      }
      if (this.targetView == 'Rect') {
        Rect()
          .commonStyle()
          .attributeModifier(this._backdropBlurRectModifier)
      }
      if (this.targetView == 'Shape') {
        Shape() {
          Rect()
            .width(100)
            .height(50)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurShapeModifier)
      }
      if (this.targetView == 'Badge') {
        Badge({ count: 50, style: { color: 0xFFFFFF, fontSize: 16, badgeSize: 20, badgeColor: Color.Red } }) {
          Button('message')
            .width(100)
            .height(50)
            .backgroundColor(0x317aff)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurBadgeModifier)
      }
      if (this.targetView == 'Column') {
        Column() {
          Button()
            .width(100)
            .height(50)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurColumnModifier)
      }
      if (this.targetView == 'ColumnSplit') {
        ColumnSplit() {
          Text('1')
            .width('100%')
            .height(50)
            .backgroundColor(0xF5DEB3)
            .textAlign(TextAlign.Center)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurColumnSplitModifier)
      }
      if (this.targetView == 'Counter') {
        Counter() {
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurCounterModifier)
      }
      if (this.targetView == 'Flex') {
        Flex() {
          Text('1')
            .width('20%')
            .height(50)
            .backgroundColor(0xF5DEB3)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurFlexModifier)
      }
      if (this.targetView == 'GridRow') {
        GridRow({ columns: 1, direction: GridRowDirection.Row }) {
          ForEach(
            [Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown],
            (color) => {
              GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 } }) {
                Row()
                  .width('100%')
                  .height('20vp')
              }
								.borderColor(color)
                .borderWidth(2)
            }
          )
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurGridRowModifier)
      }
      if (this.targetView == 'Grid') {
        Grid() {
          ForEach(['0', '1', '2', '3', '4'], () => {
            ForEach(['0', '1', '2', '3', '4'], (day: string) => {
              GridItem() {
                Text(day)
                  .backgroundColor(Color.White)
                  .width('100%')
                  .height('100%')
                  .textAlign(TextAlign.Center)
              }
            })
          })
        }
					.columnsTemplate('1fr 1fr 1fr 1fr 1fr')
          .rowsTemplate('1fr 1fr 1fr 1fr 1fr')
          .backgroundColor(0xFAEEE0)
          .commonStyle()
          .attributeModifier(this._backdropBlurGridModifier)
      }
      if (this.targetView == 'List') {
        List() {
        }
					.height('100%')
          .width('100%')
          .commonStyle()
          .attributeModifier(this._backdropBlurListModifier)
      }
      if (this.targetView == 'ListItem') {
        List({ space: 20, initialIndex: 0 }) {
          ListItem() {
            Text('item1')
              .width('100%')
              .textAlign(TextAlign.Center)
              .backgroundColor(Color.White)
          }
						.commonStyle()
            .attributeModifier(this._backdropBlurListItemModifier)
        }
					.width('100%')
          .height('100%')
      }
      if (this.targetView == 'ListItemGroup') {
        List({ space: 0, initialIndex: 0 }) {
          ListItemGroup()
            .backgroundColor(Color.Yellow)
            .commonStyle()
            .attributeModifier(this._backdropBlurListItemGroupModifier)
        }
					.backgroundColor(Color.Pink)
          .width('100%')
          .height('100%')
      }
      if (this.targetView == 'Navigator') {
        Navigator() {
          Text('Go to back page')
            .width('100%')
            .height(20)
        }
					.backgroundColor(Color.Red)
          .commonStyle()
          .attributeModifier(this._backdropBlurNavigatorModifier)
      }
      if (this.targetView == 'Panel') {
        Panel(true) {
          Text('Text')
        }
					.backgroundColor(Color.Yellow)
          .commonStyle()
          .attributeModifier(this._backdropBlurPanelModifier)
      }
      if (this.targetView == 'Refresh') {
        Refresh({ refreshing: true }) {
          Text('123')
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurRefreshModifier)
      }
      if (this.targetView == 'RelativeContainer') {
        RelativeContainer() {
          Row()
            .width(100)
            .height(100)
            .backgroundColor('#FF3333')
            .alignRules({
              top: { anchor: '__container__', align: VerticalAlign.Top },
              left: { anchor: '__container__', align: HorizontalAlign.Start }
            })
            .id('constraintSize')
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurRelativeContainerModifier)
      }
      if (this.targetView == 'Row') {
        Row()
          .commonStyle()
          .attributeModifier(this._backdropBlurRowModifier)
      }
      if (this.targetView == 'RowSplit') {
        RowSplit() {
          Text('Text')
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurRowSplitModifier)
      }
      if (this.targetView == 'Scroll') {
        Scroll() {
          Column() {
            ForEach([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], (item) => {
              Text('Scroll' + item.toString())
                .width('90%')
                .height(50)
                .backgroundColor(Color.White)
                .textAlign(TextAlign.Center)
            }, item => item)
          }
					.width('100%')
        }
					.scrollBar(BarState.On)
          .commonStyle()
          .attributeModifier(this._backdropBlurScrollModifier)
      }
      if (this.targetView == 'SideBarContainer') {
        SideBarContainer(SideBarContainerType.Embed) {
          Column() {
            ForEach([1, 2, 3], (item) => {
              Column({ space: 5 }) {
                Image($r('app.media.icon'))
                  .width(50)
                  .height(50)
                Text('Index0' + item)
                  .fontSize(25)
              }
            })
          }
						.width('100%')
            .justifyContent(FlexAlign.SpaceEvenly)
            .backgroundColor(Color.Green)

          Column() {
            Text('SideBarContainer content')
              .fontSize(25)
          }
						.backgroundColor(Color.Orange)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurSideBarContainerModifier)
      }
      if (this.targetView == 'Stack') {
        Stack() {
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurStackModifier)
      }
      if (this.targetView == 'Swiper') {
        Swiper() {
          ForEach([1, 2, 3], (item: string) => {
            Text('Swiper' + item)
              .width('90%')
              .height(50)
          }, item => item)
        }
					.indicator(true)
          .backgroundColor(Color.White)
          .commonStyle()
          .attributeModifier(this._backdropBlurSwiperModifier)
      }
      if (this.targetView == 'Tabs') {
        Tabs() {
          TabContent() {
            Column()
              .width('100%')
              .height('100%')
              .backgroundColor('#00CB87')
          }
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurTabsModifier)
      }
      if (this.targetView == 'TabContent') {
        Tabs() {
          TabContent() {
            Text('TabContent Test')
              .width('100%')
              .height('100%')
              .backgroundColor(Color.White)
          }
						.tabBar('Tabs1')
            .commonStyle()
            .attributeModifier(this._backdropBlurTabContentModifier)
        }
					.width('100%')
          .height('100%')
      }
      if (this.targetView == 'WaterFlow') {
        WaterFlow() {
          ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9], (item: number) => {
            FlowItem() {
              Column() {
                Text('WaterFlow' + item)
                  .fontSize(12)
                  .height('16')
                Image($r('app.media.icon'))
                  .width(50)
                  .height(50)
                  .objectFit(ImageFit.Fill)
              }
            }
          }, item => item)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurWaterFlowModifier)
      }
      if (this.targetView == 'GridCol') {
        GridRow({ columns: 1, direction: GridRowDirection.Row }) {
          GridCol() {
            Row()
              .width('100%')
              .height('20vp')
          }
						.backgroundColor(Color.Yellow)
            .commonStyle()
            .attributeModifier(this._backdropBlurGridColModifier)
        }
					.backgroundColor(Color.Pink)
          .width('100%')
          .height('100%')
      }
      if (this.targetView == 'GridItem') {
        Grid() {
          GridItem() {
            Text('4')
              .backgroundColor(0xFAEEE0)
              .width('100%')
              .height('100%')
              .textAlign(TextAlign.Center)
          }
						.rowStart(1)
            .rowEnd(4)
            .backgroundColor(Color.Yellow)
            .commonStyle()
            .attributeModifier(this._backdropBlurGridItemModifier)
        }
					.backgroundColor(Color.Pink)
          .width('100%')
          .height('100%')
      }
      if (this.targetView == 'FlowItem') {
        WaterFlow() {
          ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9], (item: number) => {
            FlowItem() {
              Column() {
                Text('WaterFlow' + item)
                  .fontSize(12)
                  .height('16')
                Image($r('app.media.icon'))
                  .width(50)
                  .height(50)
                  .objectFit(ImageFit.Fill)
              }
            }
						.backgroundColor(Color.Yellow)
              .commonStyle()
              .attributeModifier(this._backdropBlurFlowItemModifier)
          }, item => item)
        }
					.backgroundColor(Color.Pink)
          .width('100%')
          .height('100%')
      }
      if (this.targetView == 'MenuItem') {
        Row() {
          Menu() {
            MenuItem({ startIcon: $r('app.media.icon'), content: 'MenuItem' })
              .commonStyle()
              .attributeModifier(this._backdropBlurMenuItemModifier)
          }
						.backgroundColor(Color.Yellow)
            .width('100%')
            .height('100%')
        }
					.width('100%')
          .height('100%')
          .backgroundColor(Color.Green)
      }
      if (this.targetView == 'MenuItemGroup') {
        Row() {
          Menu() {
            MenuItemGroup({ header: 'MenuItemGroup' }) {
              MenuItem({ startIcon: $r('app.media.icon'), content: 'MenuItem' })
            }
							.commonStyle()
              .attributeModifier(this._backdropBlurMenuItemGroupModifier)
          }
						.backgroundColor(Color.Yellow)
            .width('100%')
            .height('100%')
        }
					.width('100%')
          .height('100%')
          .backgroundColor(Color.Green)
      }
      if (this.targetView == 'CalendarPicker') {
        CalendarPicker({ hintRadius: 10, selected: new Date() })
          .commonStyle()
          .attributeModifier(this._backdropBlurCalendarPickerModifier)
      }
      if (this.targetView == 'Canvas') {
        Canvas(new CanvasRenderingContext2D(new RenderingContextSettings(true)))
          .backgroundColor('#FFFF00')
          .commonStyle()
          .attributeModifier(this._backdropBlurCanvasModifier)
      }
      if (this.targetView == 'FormLink') {
        FormLink({
          action: "router",
          abilityName: "EntryAbility",
          params: { 'message': 'testForRouter' }
        }) {
          Button("router event").width(120)
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurFormLinkModifier)
      }
      if (this.targetView == 'Hyperlink') {
        Hyperlink('https://example.com/', 'Go to the developer website') {
        }
					.commonStyle()
          .attributeModifier(this._backdropBlurHyperlinkModifier)
      }
      if (this.targetView == 'Span') {
        Text() {
          Span('Span1')
            .commonStyle()
            .attributeModifier(this._backdropBlurSpanModifier)
        }
      }
    }
		.width(this.parentWidth)
      .height(this.parentHeight)
      .backgroundColor(this.parentBackGroundColor)
      .key(this.parentComponentKey)
  }
}