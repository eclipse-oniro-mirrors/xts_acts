/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import attrsManager from '../../common/AttrsManager';
import router from '@ohos.router'

class AlphabetIndexerModifier implements AttributeModifier<AlphabetIndexerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: AlphabetIndexerAttribute): void {
    instance.width(this.mWidth)
  }
}
class BadgeModifier implements AttributeModifier<BadgeAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: BadgeAttribute): void {
    instance.width(this.mWidth)
  }
}
class BlankModifier implements AttributeModifier<BlankAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: BlankAttribute): void {
    instance.width(this.mWidth)
  }
}
class ButtonModifier implements AttributeModifier<ButtonAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ButtonAttribute): void {
    instance.width(this.mWidth)
  }
}
class CalendarPickerModifier implements AttributeModifier<CalendarPickerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: CalendarPickerAttribute): void {
    instance.width(this.mWidth)
  }
}
class CheckboxModifier implements AttributeModifier<CheckboxAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: CheckboxAttribute): void {
    instance.width(this.mWidth)
  }
}
class CheckboxGroupModifier implements AttributeModifier<CheckboxGroupAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: CheckboxGroupAttribute): void {
    instance.width(this.mWidth)
  }
}
class ColumnModifier implements AttributeModifier<ColumnAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ColumnAttribute): void {
    instance.width(this.mWidth)
  }
}
class ColumnSplitModifier implements AttributeModifier<ColumnSplitAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ColumnSplitAttribute): void {
    instance.width(this.mWidth)
  }
}
class CounterModifier implements AttributeModifier<CounterAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: CounterAttribute): void {
    instance.width(this.mWidth)
  }
}
class DataPanelModifier implements AttributeModifier<DataPanelAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: DataPanelAttribute): void {
    instance.width(this.mWidth)
  }
}
class DatePickerModifier implements AttributeModifier<DatePickerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: DatePickerAttribute): void {
    instance.width(this.mWidth)
  }
}
class DividerModifier implements AttributeModifier<DividerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: DividerAttribute): void {
    instance.width(this.mWidth)
  }
}
class EffectComponentModifier implements AttributeModifier<EffectComponentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: EffectComponentAttribute): void {
    instance.width(this.mWidth)
  }
}
class FlexModifier implements AttributeModifier<FlexAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: FlexAttribute): void {
    instance.width(this.mWidth)
  }
}
class FlowItemModifier implements AttributeModifier<FlowItemAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: FlowItemAttribute): void {
    instance.width(this.mWidth)
  }
}
class FormComponentModifier implements AttributeModifier<FormComponentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: FormComponentAttribute): void {
    instance.width(this.mWidth)
  }
}
class FormLinkModifier implements AttributeModifier<FormLinkAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: FormLinkAttribute): void {
    instance.width(this.mWidth)
  }
}
class GaugeModifier implements AttributeModifier<GaugeAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: GaugeAttribute): void {
    instance.width(this.mWidth)
  }
}
class GridModifier implements AttributeModifier<GridAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: GridAttribute): void {
    instance.width(this.mWidth)
  }
}
class GridColModifier implements AttributeModifier<GridColAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: GridColAttribute): void {
    instance.width(this.mWidth)
  }
}
class GridItemModifier implements AttributeModifier<GridItemAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: GridItemAttribute): void {
    instance.width(this.mWidth)
  }
}
class GridRowModifier implements AttributeModifier<GridRowAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: GridRowAttribute): void {
    instance.width(this.mWidth)
  }
}
class HyperlinkModifier implements AttributeModifier<HyperlinkAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: HyperlinkAttribute): void {
    instance.width(this.mWidth)
  }
}
class ImageAnimatorModifier implements AttributeModifier<ImageAnimatorAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ImageAnimatorAttribute): void {
    instance.width(this.mWidth)
  }
}
class ImageSpanModifier implements AttributeModifier<ImageSpanAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ImageSpanAttribute): void {
    instance.width(this.mWidth)
  }
}
class ImageModifier implements AttributeModifier<ImageAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ImageAttribute): void {
    instance.width(this.mWidth)
  }
}
class ListModifier implements AttributeModifier<ListAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ListAttribute): void {
    instance.width(this.mWidth)
  }
}
class ListItemModifier implements AttributeModifier<ListItemAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ListItemAttribute): void {
    instance.width(this.mWidth)
  }
}
class ListItemGroupModifier implements AttributeModifier<ListItemGroupAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ListItemGroupAttribute): void {
    instance.width(this.mWidth)
  }
}
class LoadingProgressModifier implements AttributeModifier<LoadingProgressAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance.width(this.mWidth)
  }
}
class MarqueeModifier implements AttributeModifier<MarqueeAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: MarqueeAttribute): void {
    instance.width(this.mWidth)
  }
}
class MenuModifier implements AttributeModifier<MenuAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: MenuAttribute): void {
    instance.width(this.mWidth)
  }
}
class MenuItemModifier implements AttributeModifier<MenuItemAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: MenuItemAttribute): void {
    instance.width(this.mWidth)
  }
}
class MenuItemGroupModifier implements AttributeModifier<MenuItemGroupAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: MenuItemGroupAttribute): void {
    instance.width(this.mWidth)
  }
}
class NavDestinationModifier implements AttributeModifier<NavDestinationAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: NavDestinationAttribute): void {
    instance.width(this.mWidth)
  }
}
class NavigationModifier implements AttributeModifier<NavigationAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: NavigationAttribute): void {
    instance.width(this.mWidth)
  }
}
class NavigatorModifier implements AttributeModifier<NavigatorAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: NavigatorAttribute): void {
    instance.width(this.mWidth)
  }
}
class NavRouterModifier implements AttributeModifier<NavRouterAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: NavRouterAttribute): void {
    instance.width(this.mWidth)
  }
}
class PatternLockModifier implements AttributeModifier<PatternLockAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: PatternLockAttribute): void {
    instance.width(this.mWidth)
  }
}
class PluginComponentModifier implements AttributeModifier<PluginComponentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: PluginComponentAttribute): void {
    instance.width(this.mWidth)
  }
}
class QRCodeModifier implements AttributeModifier<QRCodeAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: QRCodeAttribute): void {
    instance.width(this.mWidth)
  }
}
class RadioModifier implements AttributeModifier<RadioAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RadioAttribute): void {
    instance.width(this.mWidth)
  }
}
class RatingModifier implements AttributeModifier<RatingAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RatingAttribute): void {
    instance.width(this.mWidth)
  }
}
class RefreshModifier implements AttributeModifier<RefreshAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RefreshAttribute): void {
    instance.width(this.mWidth)
  }
}
class RelativeContainerModifier implements AttributeModifier<RelativeContainerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RelativeContainerAttribute): void {
    instance.width(this.mWidth)
  }
}
class RemoteWindowModifier implements AttributeModifier<RemoteWindowAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RemoteWindowAttribute): void {
    instance.width(this.mWidth)
  }
}
class RichEditorModifier implements AttributeModifier<RichEditorAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RichEditorAttribute): void {
    instance.width(this.mWidth)
  }
}
class RichTextModifier implements AttributeModifier<RichTextAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RichTextAttribute): void {
    instance.width(this.mWidth)
  }
}
class RowModifier implements AttributeModifier<RowAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RowAttribute): void {
    instance.width(this.mWidth)
  }
}
class RowSplitModifier implements AttributeModifier<RowSplitAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: RowSplitAttribute): void {
    instance.width(this.mWidth)
  }
}
class ScrollModifier implements AttributeModifier<ScrollAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ScrollAttribute): void {
    instance.width(this.mWidth)
  }
}
class ScrollBarModifier implements AttributeModifier<ScrollBarAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ScrollBarAttribute): void {
    instance.width(this.mWidth)
  }
}
class SearchModifier implements AttributeModifier<SearchAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: SearchAttribute): void {
    instance.width(this.mWidth)
  }
}
class SelectModifier implements AttributeModifier<SelectAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: SelectAttribute): void {
    instance.width(this.mWidth)
  }
}
class SideBarContainerModifier implements AttributeModifier<SideBarContainerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: SideBarContainerAttribute): void {
    instance.width(this.mWidth)
  }
}
class SliderModifier implements AttributeModifier<SliderAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: SliderAttribute): void {
    instance.width(this.mWidth)
  }
}
class StackModifier implements AttributeModifier<StackAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: StackAttribute): void {
    instance.width(this.mWidth)
  }
}
class StepperModifier implements AttributeModifier<StepperAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: StepperAttribute): void {
    instance.width(this.mWidth)
  }
}
class StepperItemModifier implements AttributeModifier<StepperItemAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: StepperItemAttribute): void {
    instance.width(this.mWidth)
  }
}
class SwiperModifier implements AttributeModifier<SwiperAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: SwiperAttribute): void {
    instance.width(this.mWidth)
  }
}
class TabContentModifier implements AttributeModifier<TabContentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TabContentAttribute): void {
    instance.width(this.mWidth)
  }
}
class TabsModifier implements AttributeModifier<TabsAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TabsAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextModifier implements AttributeModifier<TextAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextAreaModifier implements AttributeModifier<TextAreaAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextAreaAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextClockModifier implements AttributeModifier<TextClockAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextClockAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextInputModifier implements AttributeModifier<TextInputAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextInputAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextPickerModifier implements AttributeModifier<TextPickerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextPickerAttribute): void {
    instance.width(this.mWidth)
  }
}
class TextTimerModifier implements AttributeModifier<TextTimerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TextTimerAttribute): void {
    instance.width(this.mWidth)
  }
}
class TimePickerModifier implements AttributeModifier<TimePickerAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: TimePickerAttribute): void {
    instance.width(this.mWidth)
  }
}
class ToggleModifier implements AttributeModifier<ToggleAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: ToggleAttribute): void {
    instance.width(this.mWidth)
  }
}
class UIExtensionComponentModifier implements AttributeModifier<UIExtensionComponentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: UIExtensionComponentAttribute): void {
    instance.width(this.mWidth)
  }
}
class WaterFlowModifier implements AttributeModifier<WaterFlowAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: WaterFlowAttribute): void {
    instance.width(this.mWidth)
  }
}
class WebModifier implements AttributeModifier<WebAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: WebAttribute): void {
    instance.width(this.mWidth)
  }
}
class XComponentModifier implements AttributeModifier<XComponentAttribute> {
  mWidth: number | string = 10
  applyNormalAttribute(instance: XComponentAttribute): void {
    instance.width(this.mWidth)
  }
}
class ProgressModifier implements AttributeModifier<ProgressAttribute>{
  mWidth: number | string = 10
  applyNormalAttribute(instance: ProgressAttribute): void {
    instance.width(this.mWidth)
  }
}
class CircleModifier implements AttributeModifier<CircleAttribute>{
  mWidth: number | string = 10
  applyNormalAttribute(instance: CircleAttribute): void {
    instance.width(this.mWidth)
  }
}

class PanelModifier implements AttributeModifier<PanelAttribute>{
  mWidth: number | string = 10
  applyNormalAttribute(instance: PanelAttribute): void {
    instance.width(this.mWidth)
  }
}

@Entry
@Component
struct WidthPage {
  //Use for TimePicker.
  private selectedTime: Date = new Date('2022-07-22T08:00:00')
  //Use for QRCode,Marquee.
  private src: string = 'Running Marquee starts rolling'
  //Use for AlphabetIndexer,TextPicker.
  private value: string[] = ['#', 'A', 'B']
  //Use for Scroll,Grid,DataPanel.
  public valueArr: number[] = [5, 10, 10, 7, 9, 10, 10, 10, 10]
  @State _width: number | string = 0
  @State _witdhPanelMod: PanelModifier = new PanelModifier()
  @State _widthCircleMod: CircleModifier = new CircleModifier()
  @State _widthProgressMod: ProgressModifier = new ProgressModifier()
  // @Stae  _widthBlankRowMod: BlankRowModifier = new BlankRowModifier()
  @State _widthAlphabetIndexerMod: AlphabetIndexerModifier = new AlphabetIndexerModifier()
  @State _widthBadgeMod: BadgeModifier = new BadgeModifier()
  //Blank Component is not found on build
  @State _widthBlankMod: BlankModifier = new BlankModifier()
  @State _widthButtonMod: ButtonModifier = new ButtonModifier()
  //CalendarPicker Component is not found on build
  @State _widthCalendarPickerMod: CalendarPickerModifier = new CalendarPickerModifier()
  @State _widthCheckboxMod: CheckboxModifier = new CheckboxModifier()
  @State _widthCheckboxGroupMod: CheckboxGroupModifier = new CheckboxGroupModifier()
  @State _widthColumnMod: ColumnModifier = new ColumnModifier()
  @State _widthColumnSplitMod: ColumnSplitModifier = new ColumnSplitModifier()
  @State _widthCounterMod: CounterModifier = new CounterModifier()
  @State _widthDataPanelMod: DataPanelModifier = new DataPanelModifier()
  @State _widthDatePickerMod: DatePickerModifier = new DatePickerModifier()
  @State _widthDividerMod: DividerModifier = new DividerModifier()
  //EffectComponent Component is not found on build
  @State _widthEffectComponentMod: EffectComponentModifier = new EffectComponentModifier()
  @State _widthFlexMod: FlexModifier = new FlexModifier()
  @State _widthFlowItemMod: FlowItemModifier = new FlowItemModifier()
  //FormComponent Component is not found on build
  @State _widthFormComponentMod: FormComponentModifier = new FormComponentModifier()
  //FormLink Component is not found on build
  @State _widthFormLinkMod: FormLinkModifier = new FormLinkModifier()
  @State _widthGaugeMod: GaugeModifier = new GaugeModifier()
  @State _widthGridMod: GridModifier = new GridModifier()
  @State _widthGridColMod: GridColModifier = new GridColModifier()
  @State _widthGridItemMod: GridItemModifier = new GridItemModifier()
  @State _widthGridRowMod: GridRowModifier = new GridRowModifier()
  //Hyperlink Component is not found on build
  @State _widthHyperlinkMod: HyperlinkModifier = new HyperlinkModifier()
  @State _widthImageAnimatorMod: ImageAnimatorModifier = new ImageAnimatorModifier()
  //ImageSpan Component is not found on build
  @State _widthImageSpanMod: ImageSpanModifier = new ImageSpanModifier()
  @State _widthImageMod: ImageModifier = new ImageModifier()
  @State _widthListMod: ListModifier = new ListModifier()
  @State _widthListItemMod: ListItemModifier = new ListItemModifier()
  //ListItemGroup Component is not found on build
  @State _widthListItemGroupMod: ListItemGroupModifier = new ListItemGroupModifier()
  @State _widthLoadingProgressMod: LoadingProgressModifier = new LoadingProgressModifier()
  @State _widthMarqueeMod: MarqueeModifier = new MarqueeModifier()
  @State _widthMenuMod: MenuModifier = new MenuModifier()
  @State _widthMenuItemMod: MenuItemModifier = new MenuItemModifier()
  @State _widthMenuItemGroupMod: MenuItemGroupModifier = new MenuItemGroupModifier()
  //NavDestination Component is not found on build
  @State _widthNavDestinationMod: NavDestinationModifier = new NavDestinationModifier()
  @State _widthNavRouterMod: NavRouterModifier = new NavRouterModifier()
  @State _widthNavigationMod: NavigationModifier = new NavigationModifier()
  @State _widthNavigatorMod: NavigatorModifier = new NavigatorModifier()
  //PatternLock Component is not found on build
  @State _widthPatternLockMod: PatternLockModifier = new PatternLockModifier()
  //PluginComponent Component is not found on build
  @State _widthPluginComponentMod: PluginComponentModifier = new PluginComponentModifier()
  //QRCodeAttribute Component is not found on build
  @State _widthQRCodeMod: QRCodeModifier = new QRCodeModifier()
  @State _widthRadioMod: RadioModifier = new RadioModifier()
  @State _widthRatingMod: RatingModifier = new RatingModifier()
  @State _widthRefreshMod: RefreshModifier = new RefreshModifier()
  @State _widthRelativeContainerMod: RelativeContainerModifier = new RelativeContainerModifier()
  //RemoteWindow Component is not found on build
  @State _widthRemoteWindowMod: RemoteWindowModifier = new RemoteWindowModifier()
  //RichEditor Component is not found on build
  @State _widthRichEditorMod: RichEditorModifier = new RichEditorModifier()
  @State _widthRichTextMod: RichTextModifier = new RichTextModifier()
  @State _widthRowMod: RowModifier = new RowModifier()
  @State _widthRowSplitMod: RowSplitModifier = new RowSplitModifier()
  @State _widthScrollMod: ScrollModifier = new ScrollModifier()
  @State _widthScrollBarMod: ScrollBarModifier = new ScrollBarModifier()
  @State _widthSearchMod: SearchModifier = new SearchModifier()
  @State _widthSelectMod: SelectModifier = new SelectModifier()
  @State _widthSideBarContainerMod: SideBarContainerModifier = new SideBarContainerModifier()
  @State _widthSliderMod: SliderModifier = new SliderModifier()
  @State _widthStackMod: StackModifier = new StackModifier()
  @State _widthStepperMod: StepperModifier = new StepperModifier()
  @State _widthStepperItemMod: StepperItemModifier = new StepperItemModifier()
  @State _widthSwiperMod: SwiperModifier = new SwiperModifier()
  @State _widthTabContentMod: TabContentModifier = new TabContentModifier()
  @State _widthTabsMod: TabsModifier = new TabsModifier()
  @State _widthTextMod: TextModifier = new TextModifier()
  @State _widthTextAreaMod: TextAreaModifier = new TextAreaModifier()
  @State _widthTextClockMod: TextClockModifier = new TextClockModifier()
  @State _widthTextInputMod: TextInputModifier = new TextInputModifier()
  @State _widthTextPickerMod: TextPickerModifier = new TextPickerModifier()
  @State _widthTextTimerMod: TextTimerModifier = new TextTimerModifier()
  @State _widthTimePickerMod: TimePickerModifier = new TimePickerModifier()
  @State _widthToggleMod: ToggleModifier = new ToggleModifier()
  //UIExtensionComponent Component is not found on build
  @State _widthUIExtensionComponentMod: UIExtensionComponentModifier = new UIExtensionComponentModifier()
  @State _widthWaterFlowMod: WaterFlowModifier = new WaterFlowModifier()
  @State _widthWebMod: WebModifier = new WebModifier()
  //XComponent Component is not found on build
  @State _widthXComponentMod: XComponentModifier = new XComponentModifier()
  @State targetView: string = router.getParams() ? router.getParams()['view']['targetView'] : ''
  @State componentKey: string = router.getParams() ? router.getParams()['view']['componentKey'] : ''
  @State parentWidth: number = router.getParams() ? router.getParams()['view']['parentWidth'] : 0
  @State parentHeight: number = router.getParams() ? router.getParams()['view']['parentHeight'] : 0
  @State parentBackGroundColor: string = router.getParams() ? router.getParams()['view']['parentBackGroundColor'] : ''
  @State BackGroundColor: string = router.getParams() ? router.getParams()['view']['BackGroundColor'] : ''
  @State parentComponentKey: string = router.getParams() ? router.getParams()['view']['parentComponentKey'] : ''
  @State columns: number = router.getParams() ? router.getParams()['view']['columns'] : 0
  @State gutter: number = router.getParams() ? router.getParams()['view']['gutter'] : 0


  onPageShow() {
    console.info('[WidthPage] page show called ')
    //Register data change call back.
    attrsManager.registerDataChange(value => {
      console.info('[registerDataChange2] ' + value.width)
      this._widthCircleMod.mWidth = value.width
      this._widthProgressMod.mWidth = value.width
      this._witdhPanelMod.mWidth = value.width
      this._widthAlphabetIndexerMod.mWidth = value.width
      this._widthBadgeMod.mWidth = value.width
      this._widthBlankMod.mWidth = value.width
      this._widthButtonMod.mWidth = value.width
      this._widthCalendarPickerMod.mWidth = value.width
      this._widthCheckboxMod.mWidth = value.width
      this._widthCheckboxGroupMod.mWidth = value.width
      this._widthColumnMod.mWidth = value.width
      this._widthColumnSplitMod.mWidth = value.width
      this._widthCounterMod.mWidth = value.width
      this._widthDataPanelMod.mWidth = value.width
      this._widthDatePickerMod.mWidth = value.width
      this._widthDividerMod.mWidth = value.width
      this._widthEffectComponentMod.mWidth = value.width
      this._widthFlexMod.mWidth = value.width
      this._widthFlowItemMod.mWidth = value.width
      this._widthFormComponentMod.mWidth = value.width
      this._widthFormLinkMod.mWidth = value.width
      this._widthGaugeMod.mWidth = value.width
      this._widthGridMod.mWidth = value.width
      this._widthGridColMod.mWidth = value.width
      this._widthGridItemMod.mWidth = value.width
      this._widthGridRowMod.mWidth = value.width
      this._widthHyperlinkMod.mWidth = value.width
      this._widthImageAnimatorMod.mWidth = value.width
      this._widthImageSpanMod.mWidth = value.width
      this._widthImageMod.mWidth = value.width
      this._widthListMod.mWidth = value.width
      this._widthListItemMod.mWidth = value.width
      this._widthListItemGroupMod.mWidth = value.width
      this._widthLoadingProgressMod.mWidth = value.width
      this._widthMarqueeMod.mWidth = value.width
      this._widthMenuMod.mWidth = value.width
      this._widthMenuItemMod.mWidth = value.width
      this._widthMenuItemGroupMod.mWidth = value.width
      this._widthNavDestinationMod.mWidth = value.width
      this._widthNavRouterMod.mWidth = value.width
      this._widthNavigationMod.mWidth = value.width
      this._widthNavigatorMod.mWidth = value.width
      this._widthPatternLockMod.mWidth = value.width
      this._widthPluginComponentMod.mWidth = value.width
      this._widthQRCodeMod.mWidth = value.width
      this._widthRadioMod.mWidth = value.width
      this._widthRatingMod.mWidth = value.width
      this._widthRefreshMod.mWidth = value.width
      this._widthRelativeContainerMod.mWidth = value.width
      this._widthRemoteWindowMod.mWidth = value.width
      this._widthRichEditorMod.mWidth = value.width
      this._widthRichTextMod.mWidth = value.width
      this._widthRowMod.mWidth = value.width
      this._widthRowSplitMod.mWidth = value.width
      this._widthScrollMod.mWidth = value.width
      this._widthScrollBarMod.mWidth = value.width
      this._widthSearchMod.mWidth = value.width
      this._widthSelectMod.mWidth = value.width
      this._widthSideBarContainerMod.mWidth = value.width
      this._widthSliderMod.mWidth = value.width
      this._widthStackMod.mWidth = value.width
      this._widthStepperMod.mWidth = value.width
      this._widthStepperItemMod.mWidth = value.width
      this._widthSwiperMod.mWidth = value.width
      this._widthTabContentMod.mWidth = value.width
      this._widthTabsMod.mWidth = value.width
      this._widthTextMod.mWidth = value.width
      this._widthTextAreaMod.mWidth = value.width
      this._widthTextClockMod.mWidth = value.width
      this._widthTextInputMod.mWidth = value.width
      this._widthTextPickerMod.mWidth = value.width
      this._widthTextTimerMod.mWidth = value.width
      this._widthTimePickerMod.mWidth = value.width
      this._widthToggleMod.mWidth = value.width
      this._widthUIExtensionComponentMod.mWidth = value.width
      this._widthWaterFlowMod.mWidth = value.width
      this._widthWebMod.mWidth = value.width
      this._widthXComponentMod.mWidth = value.width
    })
  }

  @Styles commonStyle(){
    // .width(this._width)
    .height('100%')
      .key(this.componentKey)
  }

  build() {
    Row() {
      if (this.targetView == 'Button') {
        Button('button1').commonStyle().height(100).attributeModifier(this._widthButtonMod)
      } else if (this.targetView == 'Text') {
        Text('text1').commonStyle().height(100).attributeModifier(this._widthTextMod)
      } else if (this.targetView == 'AlphabetIndexer') {
        AlphabetIndexer({ arrayValue: this.value, selected: 0 })
          .commonStyle().height(100).attributeModifier(this._widthAlphabetIndexerMod)
      } else if (this.targetView == 'BlankRow') {
        Blank().color(this.BackGroundColor).commonStyle().height(100)
      } else if (this.targetView == 'BlankColumn') {
        Column() {
          Blank().color(this.BackGroundColor).commonStyle()
        }.key(this.parentComponentKey).width(this.parentWidth).height(this.parentHeight)
      } else if (this.targetView == 'Checkbox') {
        Checkbox().backgroundColor(this.BackGroundColor).commonStyle().height(100).margin(0).attributeModifier(this._widthCheckboxMod)
      } else if (this.targetView == 'CheckboxGroup') {
        CheckboxGroup({ group: 'checkboxGroup' }).commonStyle().backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthCheckboxGroupMod)
          .margin(0)
      } else if (this.targetView == 'DataPanel') {
        DataPanel({ values: this.valueArr }).commonStyle().height(100).attributeModifier(this._widthDataPanelMod)
      } else if (this.targetView == 'DatePicker') {
        DatePicker({
          start: new Date('1970-1-1'),
          end: new Date('2100-1-1')
        }).commonStyle().height(100).attributeModifier(this._widthDatePickerMod)
      } else if (this.targetView == 'Divider') {
        Divider().strokeWidth(8).color(Color.Red).commonStyle().height(100).attributeModifier(this._widthDividerMod)
      } else if (this.targetView == 'Gauge') {
        Gauge({ value: 105 }).commonStyle().attributeModifier(this._widthGaugeMod).colors([[0x317AF7, 1], [0x5BA854, 1], [0xE08C3A, 1], [0x9C554B, 1]])
          .height(100)
      } else if (this.targetView == 'Image') {
        Image($r('app.media.icon')).commonStyle().height(110).backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthImageMod)
      } else if (this.targetView == 'ImageAnimator') {
        ImageAnimator()
          .images([
            {
              src: $r('app.media.icon')
            }
          ]).commonStyle().height(100).attributeModifier(this._widthImageAnimatorMod)
      } else if (this.targetView == 'LoadingProgress') {
        LoadingProgress().backgroundColor(this.BackGroundColor).commonStyle().height(100).attributeModifier(this._widthLoadingProgressMod)
      } else if (this.targetView == 'Marquee') {
        Marquee({
          start: true,
          step: 50,
          loop: Infinity,
          fromStart: true,
          src: this.src
        }).commonStyle().attributeModifier(this._widthMarqueeMod)
          .height(100)
      } else if (this.targetView == 'Navigation') {
        Navigation().commonStyle().height(100).attributeModifier(this._widthNavigationMod)
      } else if (this.targetView == 'NavRouter') {
        NavRouter().commonStyle().height(100).attributeModifier(this._widthNavRouterMod)
      } else if (this.targetView == 'Progress') {
        Progress({ value: 10, type: ProgressType.Eclipse }).commonStyle().height(100).attributeModifier(this._widthProgressMod)
      } else if (this.targetView == 'QRCode') {
        QRCode(this.src).commonStyle().backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthQRCodeMod)
      } else if (this.targetView == 'Radio') {
        Radio({ value: 'Radio1', group: 'radioGroup' })
          .height(100)
          .commonStyle().attributeModifier(this._widthRadioMod)
          .backgroundColor(this.BackGroundColor)
          .margin(0)
      } else if (this.targetView == 'Rating') {
        Rating({ rating: 3.5 }).commonStyle().height(100).attributeModifier(this._widthRatingMod)
      } else if (this.targetView == 'RichText') {
        RichText('RichText').commonStyle().height(100).backgroundColor(this.BackGroundColor).attributeModifier(this._widthRichTextMod)
      } else if (this.targetView == 'ScrollBar') {
        ScrollBar({ scroller: new Scroller() }) {
          Text().width(10).height(50).backgroundColor('#C0C0C0')
        }.commonStyle().backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthScrollBarMod)
      } else if (this.targetView == 'Search') {
        Search().commonStyle().height(100).attributeModifier(this._widthSearchMod)
      } else if (this.targetView == 'Select') {
        Select([{ value: 'aaa' },
        { value: 'bbb' }]).backgroundColor(this.BackGroundColor).commonStyle().height(100).attributeModifier(this._widthSelectMod)
      } else if (this.targetView == 'Slider') {
        Slider({
          value: 50
        }).showTips(true).commonStyle().height(100).attributeModifier(this._widthSliderMod)
      } else if (this.targetView == 'TextArea') {
        TextArea({ placeholder: 'TextArea' }).backgroundColor(this.BackGroundColor).commonStyle().height(100).attributeModifier(this._widthTextAreaMod)
      } else if (this.targetView == 'TextClock') {
        TextClock({ timeZoneOffset: -8 }).format('hms').commonStyle().backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthTextClockMod)
      } else if (this.targetView == 'TextInput') {
        TextInput({ placeholder: 'input your word...' }).commonStyle().height(100).attributeModifier(this._widthTextInputMod)
      } else if (this.targetView == 'TextPicker') {
        TextPicker({ range: this.value }).commonStyle().height(100).attributeModifier(this._widthTextPickerMod)
      } else if (this.targetView == 'TextTimer') {
        TextTimer({ isCountDown: true, count: 30000 })
          .format('mm:ss.SS')
          .commonStyle().attributeModifier(this._widthTextTimerMod)
          .height(100)
          .backgroundColor(this.BackGroundColor)
      } else if (this.targetView == 'TimePicker') {
        TimePicker({
          selected: this.selectedTime
        }).useMilitaryTime(true).commonStyle().height(100).attributeModifier(this._widthTimePickerMod)
      } else if (this.targetView == 'Toggle') {
        Toggle({ type: ToggleType.Switch }).commonStyle().backgroundColor(this.BackGroundColor).height(100).margin(0).attributeModifier(this._widthToggleMod)
      } else if (this.targetView == 'Web') {
        Web({ src: 'www.example.com', controller: new WebController() }).commonStyle().height(100).attributeModifier(this._widthWebMod)
      } else if (this.targetView == 'Circle') {
        Circle().commonStyle().height(100).attributeModifier(this._widthCircleMod)
      } else if (this.targetView == 'Ellipse') {
        Ellipse().commonStyle().height(100)
      } else if (this.targetView == 'Line') {
        Line()
          .startPoint([0, 0])
          .endPoint([50, 100])
          .commonStyle()
          .height(100)
          .backgroundColor(this.BackGroundColor)
      } else if (this.targetView == 'Polyline') {
        Polyline()
          .commonStyle().height(200).points([[20, 0], [0, 100], [100, 90]]).backgroundColor(this.BackGroundColor)
      } else if (this.targetView == 'Polygon') {
        Polygon()
          .commonStyle()
          .height(100)
          .points([[0, 0], [0, 100], [100, 100], [100, 0]])
          .backgroundColor(this.BackGroundColor)
      } else if (this.targetView == 'Path') {
        Path()
          .commonStyle()
          .height(100)
          .backgroundColor(this.BackGroundColor)
      } else if (this.targetView == 'Rect') {
        Rect()
          .commonStyle()
          .height(100)
      } else if (this.targetView == 'Shape') {
        Shape() {
          Rect().width(100).height(50)
        }.commonStyle()
          .backgroundColor(this.BackGroundColor)
          .height(100)
      } else if (this.targetView == 'WaterFlow') {
        WaterFlow().commonStyle().backgroundColor(this.BackGroundColor).height(100).attributeModifier(this._widthWaterFlowMod)
      } else if (this.targetView == 'Stepper') {
        Stepper() {
          StepperItem()
        }.commonStyle().height(100).attributeModifier(this._widthStepperMod)
      } else if (this.targetView == 'StepperItem') {
        Stepper() {
          StepperItem() {
            Text('Page One')
          }.commonStyle().attributeModifier(this._widthStepperItemMod)
        }.key(this.parentComponentKey).width(this.parentWidth).height(this.parentHeight)
      } else if (this.targetView == 'FlowItem') {
        WaterFlow() {
          FlowItem().commonStyle().attributeModifier(this._widthFlowItemMod)
        }.key(this.parentComponentKey).width(this.parentWidth).height(this.parentHeight)
      } else if (this.targetView == 'GridCol') {
        GridRow() {
          GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 } }) {
            Row().width('100%').height('20vp')
          }.commonStyle().attributeModifier(this._widthGridColMod)
        }.key(this.parentComponentKey).width(this.parentWidth).height(this.parentHeight)
      } else if (this.targetView == 'GridItem') {
        Grid() {
          GridItem().commonStyle()
        }.key(this.parentComponentKey).width(this.parentWidth).height(this.parentHeight)
      } else if (this.targetView == 'RelativeContainer') {
        RelativeContainer() {
          Row()
            .width('100%')
            .height('100%')
            .backgroundColor('#FF3333')
            .alignRules({
              center: { anchor: '__container__', align: VerticalAlign.Center },
              middle: { anchor: '__container__', align: HorizontalAlign.Center }
            })
        }.backgroundColor(Color.Green).commonStyle().height(100)
      } else if (this.targetView == 'Navigator') {
        Navigator().commonStyle().height(100).attributeModifier(this._widthNavigatorMod)
      } else if (this.targetView == 'Badge') {
        Badge({
          count: 50,
          style: { color: 0xFFFFFF, fontSize: 16, badgeSize: 20, badgeColor: Color.Red }
        }) {
          Button('message')
            .width(100).height(50).backgroundColor(0x317aff)
        }.commonStyle().attributeModifier(this._widthBadgeMod)

      } else if (this.targetView == 'Column') {
        Column() {
          Column().width('100%').height(30).backgroundColor(0xAFEEEE)
        }.commonStyle().attributeModifier(this._widthColumnMod)
      } else if (this.targetView == 'ColumnSplit') {
        ColumnSplit() {
          Text('1').width('100%').height(50).backgroundColor(0xF5DEB3).textAlign(TextAlign.Center)
        }.commonStyle().attributeModifier(this._widthColumnSplitMod)
      } else if (this.targetView == 'Counter') {
        Counter() {
        }.commonStyle().attributeModifier(this._widthCounterMod)
      } else if (this.targetView == 'Flex') {
        Flex() {
          Text('1').width('20%').height(50).backgroundColor(0xF5DEB3)
        }.commonStyle().attributeModifier(this._widthFlexMod)
      } else if (this.targetView == 'GridRow') {
        GridRow({
          columns: 1,
          direction: GridRowDirection.Row
        }) {
          ForEach([Color.Red, Color.Orange, Color.Yellow, Color.Green,
          Color.Pink, Color.Grey, Color.Blue, Color.Brown], (color) => {
            GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 } }) {
              Row().width('100%').height('20vp')
            }.borderColor(color).borderWidth(2)
          })
        }.commonStyle().attributeModifier(this._widthGridRowMod)
      } else if (this.targetView == 'Grid') {
        Grid() {
          ForEach(['0', '1', '2', '3', '4'], () => {
            ForEach(['0', '1', '2', '3', '4'], (day: string) => {
              GridItem() {
                Text(day).backgroundColor(Color.White)
                  .width('100%').height('100%').textAlign(TextAlign.Center)
              }
            })
          })
        }
            .columnsTemplate('1fr 1fr 1fr 1fr 1fr')
          .rowsTemplate('1fr 1fr 1fr 1fr 1fr')
          .commonStyle().attributeModifier(this._widthGridMod)
          .backgroundColor(0xFAEEE0)
      }
      else if (this.targetView == 'List') {
        List() {
        }.commonStyle().height('100%').width('100%').attributeModifier(this._widthListMod)
      } else if (this.targetView == 'Refresh') {
        Refresh({ refreshing: true }) {
          Text('123')
        }.commonStyle().attributeModifier(this._widthRefreshMod)
      }
      else if (this.targetView == 'Row') {
        Row().commonStyle().attributeModifier(this._widthRowMod)
      } else if (this.targetView == 'RowSplit') {
        RowSplit() {
          Text('Text')
        }.commonStyle().attributeModifier(this._widthRowSplitMod)
      } else if (this.targetView == 'Scroll') {
        Scroll() {
          Column() {
            ForEach([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], (item) => {
              Text('Scroll' + item.toString())
                .width('90%')
                .height(50)
                .backgroundColor(Color.White)
                .textAlign(TextAlign.Center)
            }, item => item)
          }.width('100%')
        }.scrollBar(BarState.On).commonStyle().attributeModifier(this._widthScrollMod)
      } else if (this.targetView == 'SideBarContainer') {
        SideBarContainer(SideBarContainerType.Embed) {
          Column() {
            ForEach([1, 2, 3], (item) => {
              Column({ space: 5 }) {
                Image($r('app.media.icon')).width(50).height(50)
                Text('Index0' + item).fontSize(25)
              }
            })
          }.width('100%').justifyContent(FlexAlign.SpaceEvenly).backgroundColor(Color.Green)

          Column() {
            Text('SideBarContainer content').fontSize(25)
          }.backgroundColor(Color.Orange)
        }.commonStyle().attributeModifier(this._widthSideBarContainerMod)
      } else if (this.targetView == 'Stack') {
        Stack() {
        }.commonStyle().attributeModifier(this._widthStackMod)
      } else if (this.targetView == 'Swiper') {
        Swiper() {
          ForEach([1, 2, 3], (item: string) => {
            Text('Swiper' + item).width('90%').height(50)
          }, item => item)
        }
          .indicator(true)
          .backgroundColor(Color.White)
          .commonStyle().attributeModifier(this._widthSwiperMod)
      } else if (this.targetView == 'Tabs') {
        Tabs() {
          TabContent() {
            Column().width('100%').height('100%').backgroundColor('#00CB87')
          }
        }.commonStyle().attributeModifier(this._widthTabsMod)
      } else if (this.targetView == 'ListItem') {
        List({ space: 20, initialIndex: 0 }) {
          ListItem() {
            Text('item1')
              .width('100%')
              .textAlign(TextAlign.Center)
              .backgroundColor(Color.White)
          }.commonStyle().attributeModifier(this._widthListItemMod)
        }
          .width('100%')
          .height('100%')
      } else if (this.targetView == 'Panel') {
        Panel(true) {
          Text('Text')
        }.backgroundColor(Color.Yellow).commonStyle().attributeModifier(this._witdhPanelMod)
      }
    }
    .height(this.parentHeight)
        .width(this.parentWidth)
        .backgroundColor(this.parentBackGroundColor)
        .key(this.parentComponentKey)
    }
  }