/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { image } from '@kit.ImageKit';
import common from '@ohos.app.ability.common';
import { describe, it, expect, Level, beforeAll, beforeEach, afterEach, afterAll } from '@ohos/hypium';
import { LOG_TAG } from '../../common';

const TAG = LOG_TAG + 'clone';

async function clonePromiseTest(done: Function, testName: string, path: string,
  attributeKey: Array<string> | null) {
  try {
    let testContext: common.UIAbilityContext = AppStorage.get('testContext') as common.UIAbilityContext;
    const resourceMgr = testContext.resourceManager;
    const rawFile = await resourceMgr.getRawFileContent(path);
    let ops: image.SourceOptions = {
      sourceDensity: 98,
    }
    let imageSource: image.ImageSource = image.createImageSource(rawFile.buffer as ArrayBuffer, ops);
    let commodityPixelMap: image.PixelMap = await imageSource.createPixelMap();
    let pictureObj: image.Picture = image.createPicture(commodityPixelMap);
    let metadataType: image.MetadataType = image.MetadataType.EXIF_METADATA;
    let metaData: image.Metadata | null = await pictureObj.getMetadata(metadataType);
    if (metaData != null) {
      let new_metadata: image.Metadata = await metaData.clone();
      await new_metadata.getProperties(attributeKey)
      expect(true).assertTrue();
      done();
    }
  } catch (error) {
    console.info(TAG, `failed; error: ${error},${error.code}`, testName);
    expect().assertFail();
    done();
  }
}

export default function metadataCloneTest() {
  describe('metadataCloneTest', () => {

    beforeAll(async () => {
      console.info(TAG, 'beforeAll case.');
    });

    beforeEach(() => {
      console.info(TAG, 'beforeEach case.');
    });

    afterEach(() => {
      console.info(TAG, 'afterEach case.');
    });

    afterAll(() => {
      console.info(TAG, 'afterAll case.');
    });

    /**
     * @tc.number    : METADATA_CLONE_001
     * @tc.name      : clone_promise_001
     * @tc.desc      : clone
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('clone_promise_001', Level.LEVEL0, async (done: Function) => {
      const testName = 'clone_promise_001';
      const path = 'CUVAHdr.jpg';
      let attributeKey = ["ImageWidth", "ImageLength"];
      await clonePromiseTest(done, testName, path, attributeKey);
    })

    /**
     * @tc.number    : METADATA_CLONE_002
     * @tc.name      : clone_promise_002
     * @tc.desc      : clone
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('clone_promise_002', Level.LEVEL0, async (done: Function) => {
      const testName = 'clone_promise_002';
      const path = 'CUVAHdrMulti.jpg';
      let attributeKey = ["ImageWidth"];
      await clonePromiseTest(done, testName, path, attributeKey);
    })

    /**
     * @tc.number    : METADATA_CLONE_003
     * @tc.name      : clone_promise_003
     * @tc.desc      : clone
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 0
     */
    it('clone_promise_003', Level.LEVEL0, async (done: Function) => {
      const testName = 'clone_promise_003';
      const path = 'test_exif.jpg';
      let attributeKey = ["ImageLength"];
      await clonePromiseTest(done, testName, path, attributeKey);
    })
  })
}