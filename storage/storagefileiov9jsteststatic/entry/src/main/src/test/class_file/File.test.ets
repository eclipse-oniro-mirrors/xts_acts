import { describe, it, expect, TestType, Size, Level } from "../../../../hypium/index";
import hilog from '@ohos.hilog';
import abilityDelegatorRegistry from '@ohos.app.ability.abilityDelegatorRegistry';
import Utils from '../Util.test';
import fs from '@ohos.file.fs';
import { BusinessError } from '@ohos.base';

let domain: number = 0x0000; //日志标识,0x0000作为测试框架的业务标识
let tag: string = 'testTag'; //日志标识字符串,作为tag标识当前runner类下的测试行为

export const FILE_CONTENT = 'hello world';

export default function fileIOFileProperties() {
  describe('fileIO_file_properties', (): void => {

    /**
     * @tc.number SUB_BASIC_FM_FileAPI_FILE_0100
     * @tc.name fileIO_test_open_file_static_000
     * @tc.desc Test the properties of the File object.
     * The File object is obtained through the open interface.
     * @tc.size MEDIUM
     * @tc.type Functoin
     * @tc.level Level 0
     * @tc.require
     */
    it('fileIO_test_open_file_static_000', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, async (): Promise<void> => {
      let fpath = await Utils.nextFileName('fileIO_test_open_file_static_000');
      expect(await Utils.prepareFile(fpath, FILE_CONTENT)).assertTrue();

      try {
        let file = fs.openSync(fpath, fs.OpenMode.READ_ONLY);
        expect(await Utils.isIntNum(file.fd)).assertTrue();
        expect(file.path === fpath).assertTrue();
        expect(file.name === 'fileIO_test_open_file_static_000').assertTrue();
        fs.closeSync(file);
        fs.unlinkSync(fpath);
      } catch (e: BusinessError) {
        hilog.info(domain, tag, '%{public}s', 'fileIO_test_open_file_static_000 end error' + JSON.stringify(e));
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number SUB_BASIC_FM_FileAPI_FILE_0200
     * @tc.name fileIO_test_dup_file_static_001
     * @tc.desc Test the properties of the File object.
     * The File object is obtained through the dup interface.
     * @tc.size MEDIUM
     * @tc.type Functoin
     * @tc.level Level 0
     * @tc.require
     */
    it('fileIO_test_dup_file_static_001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, async (): Promise<void> => {
      let fpath = await Utils.nextFileName('fileIO_test_dup_file_static_001');
      expect(await Utils.prepareFile(fpath, FILE_CONTENT)).assertTrue();

      try {
        let file = fs.openSync(fpath, fs.OpenMode.READ_ONLY);
        let newFile = fs.dup(file.fd);
        expect(await Utils.isIntNum(newFile.fd)).assertTrue();
        expect(newFile.path == fpath).assertTrue();
        expect(file.name === 'fileIO_test_dup_file_static_001').assertTrue();
        fs.closeSync(file);
        fs.closeSync(newFile);
        fs.unlinkSync(fpath);
      } catch (e: BusinessError) {
        hilog.info(domain, tag, '%{public}s', 'fileIO_test_dup_file_static_001 end error' + JSON.stringify(e));
        expect(false).assertTrue();
      }
    });
  });
}