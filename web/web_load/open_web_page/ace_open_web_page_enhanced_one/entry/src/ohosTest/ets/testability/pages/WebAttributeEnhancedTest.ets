/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import webView from '@ohos.web.webview';
import Utils from '../../test/Utils';
import events_emitter from '@ohos.events.emitter';
import {waitForAssert, waitForExist} from '../../test/WaitTest.test';
import { URL, URL_INVALID } from '../../test/Config.test';


@Entry
@Component
struct WebAttributeEnhancedTest {
  controller: webView.WebviewController = new webView.WebviewController();
  @State str: string = '';
  @State isReceive: number = -1;
  @State isPageEnd: number = -1;
  @State isRealTitle: number = -1;

  onPageShow() {
    let valueChangeEvent: events_emitter.InnerEvent = {
      eventId: 127,
      priority: events_emitter.EventPriority.LOW
    }
    events_emitter.on(valueChangeEvent, this.valueChangeCallBack)
  }

  onPageHide() {
    events_emitter.off(127)
  }

  private valueChangeCallBack = (eventData: events_emitter.EventData) => {
    console.info('web page valueChangeCallBack');
    if (eventData != null) {
      console.info('valueChangeCallBack:' + JSON.stringify(eventData));
      if (eventData.data != null && eventData.data.ACTION != null) {
        this.str = eventData.data.ACTION;
        this.isReceive = 0;
      }
    }
  }

  build() {
    Row() {
      Column() {
        Button('web click')
          .key('OnTitleReceiveIsRealTitleButton')
          .onClick(async () => {
            await waitForExist(()=>this.isReceive, this.str, 0);
            await waitForExist(()=>this.isPageEnd, this.str, 0);
            console.info('key==>' + this.str);
            this.isReceive = -1;
            switch (this.str) {
              case 'emitOnTitleReceiveIsRealTitle001': {
                try {
                  let check = (v1: number, v2: number): boolean => {
                    return v1 == v2 ? true:false;
                  }
                  await waitForAssert(()=>this.isRealTitle, check, 1, 2025071603, this.str);
                  console.log(this.str + ' isRealTitle==>' + this.isRealTitle);
                } catch (error) {
                  console.error(`ErrorCode: ${error.code},  Message: ${error.message}`);
                }
                break;
              }
              case 'emitOnTitleReceiveIsRealTitle002': {
                try {
                  this.isRealTitle = -1;
                  this.isPageEnd = -1;
                  this.controller.loadUrl($rawfile('indexWithNoTitle.html'));
                  await waitForExist(()=>this.isPageEnd, this.str, 0);
                  let check = (v1: number, v2: number): boolean => {
                    return v1 == v2 ? true:false;
                  }
                  await waitForAssert(()=>this.isRealTitle, check, 0, 2025071604, this.str);
                  console.log(this.str + ' isRealTitle==>' + this.isRealTitle);
                } catch (error) {
                  console.error(`ErrorCode: ${error.code},  Message: ${error.message}`);
                }
                break;
              }
              case 'emitOnTitleReceiveIsRealTitle003': {
                try {
                  this.isRealTitle = -1;
                  this.isPageEnd = -1;
                  this.controller.loadUrl(URL);
                  await waitForExist(()=>this.isPageEnd, this.str, 0);
                  let check = (v1: number, v2: number): boolean => {
                    return v1 == v2 ? true:false;
                  }
                  await waitForAssert(()=>this.isRealTitle, check, 1, 2025071605, this.str);
                  console.log(this.str + ' isRealTitle==>' + this.isRealTitle);
                } catch (error) {
                  console.error(`ErrorCode: ${error.code},  Message: ${error.message}`);
                }
                break;
              }
              case 'emitOnTitleReceiveIsRealTitle004': {
                try {
                  this.isRealTitle = -1;
                  this.isPageEnd = -1;
                  this.controller.loadUrl(URL_INVALID);
                  await waitForExist(()=>this.isPageEnd, this.str, 0);
                  let check = (v1: number, v2: number): boolean => {
                    return v1 == v2 ? true:false;
                  }
                  await waitForAssert(()=>this.isRealTitle, check, 0, 2025071606, this.str);
                  console.log(this.str + ' isRealTitle==>' + this.isRealTitle);
                } catch (error) {
                  console.error(`ErrorCode: ${error.code},  Message: ${error.message}`);
                }
                break;
              }
            }
          })

        Web({ src: $rawfile('index.html'), controller: this.controller })
          .key('webView')
          .onPageEnd((event) => {
            if (event) {
              this.isPageEnd = 0;
              console.log('onPageEnd==> event.url:' + event.url);
            }
          })
          .onTitleReceive((event) => {
            if (event) {
              console.log('onTitleReceive title:' + event.title);
              console.log('onTitleReceive isRealTitle:' + event.isRealTitle);
              if (event.isRealTitle === true) {
                this.isRealTitle = 1
              } else {
                this.isRealTitle = 0
              }
            }
          })
      }
      .width('100%')
    }

    .height('100%')
  }
}